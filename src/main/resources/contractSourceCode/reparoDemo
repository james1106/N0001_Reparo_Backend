contract Reparo {

    struct User{
        uint id;
        bytes32 nickName;
        bytes32 password;
        bytes32 phoneNum;
    }

    mapping (uint=>User) user;

    uint[] users;
    string[] ss;

    function addUser(uint _id,
    bytes32 _nickName,
    bytes32 _password,
    bytes32 _phoneNum) returns(uint, bool){
        user[_id].id = _id;
        user[_id].nickName = _nickName;
        user[_id].password = _password;
        user[_id].phoneNum = _phoneNum;

        users.push(_id);

        return (0, true);
    }

    function queryUser(uint _id)returns(uint, bytes32, bytes32, bytes32) {
        return(0, user[_id].nickName, user[_id].password, user[_id].phoneNum);
    }

    function queryUserList() returns(uint, uint[]) {
        return (0, users);
    }

    function queryUserDetailList() returns(uint, uint[], bytes32[], bytes32[], bytes32[]) {
        uint[] memory IdArr = new uint[](users.length);
        bytes32[] memory nickNameArr = new bytes32[](users.length);
        bytes32[] memory passwordArr = new bytes32[](users.length);
        bytes32[] memory phoneNumArr = new bytes32[](users.length);
        for(uint i = 0; i < users.length; i++) {
            uint tempId = users[i];
            IdArr[i] = tempId;
            nickNameArr[i] = user[tempId].nickName;
            passwordArr[i] = user[tempId].password;
            phoneNumArr[i] = user[tempId].phoneNum;
        }

      return (0, IdArr, nickNameArr, passwordArr, phoneNumArr);
    }

}
contract contract1{
    address owner;
    function contract1(){
        owner = msg.sender;
    }

    function callOthersContract(address conAddress) returns (uint) {
      testContract   con =   testContract (conAddress) ;
      return con.getV();
    }

    function callOthersContract2(address conAddress,uint key) returns (uint,uint) {
          testContract   con =   testContract (conAddress) ;
          return con.getMap(key);
    }
}
contract testContract{
    uint v;

    //
    mapping( uint => uint) accountMap;

    function setV(uint bb) returns (uint){
        v = bb;
        return v;
    }

    function getV() returns (uint) {
        return v;
    }

    function setMap(uint key,uint value) returns (uint){
        accountMap[key] = value;
        return 0;
    }

    function getMap(uint key) returns (uint,uint){
           return (0,accountMap[key]) ;
    }
}