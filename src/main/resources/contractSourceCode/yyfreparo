contract chain{
    //应收款
    struct Receivable {
        bytes32 receivableNo;//应收款编号
        bytes32 orderNo;//订单编号
        bytes32 signer; //签发人账号
        bytes32 accptr; //承兑人账号
        bytes32 pyer;//付款人账号
        bytes32 pyee;//收款人账号
        bytes32 firstOwner;//本手持有人账号
        bytes32 secondOwner;//下手持有人账号
        uint isseAmt; //票面金额
        uint cashedAmount;//已兑付金额
        bytes32 status;//应收款状态
        bytes32 lastStatus;//上一状态
        uint isseDt; //签发日
        uint signInDt;//签收日
        uint dueDt; //到期日
        bytes32 rate;//利率
        bytes32 contractNum;//合同号，暂时不用
        bytes32 wayBillNum;//运单号，暂时不用
        bytes note;//备注,暂时不用
    }

    //操作记录
    struct ReceivableRecord {
        bytes32 receivableNo;//应收款编号
        bytes32 serialNo;//流水号
        address applicantAcctId;//申请人账号
        address replyerAcctId;//回复人账号
        ResponseType responseType;//回复意见
        uint time;//时间戳
        bytes32 operateType; //操作类型
        uint dealAmount;//操作金额
    }

    //帐户信息
    struct Account{
        address     publicKey;//公钥
        bytes32     nickName;//用户名
        bytes32     companyName;//企业名称
        RoleCode    roleCode;//角色
        AccountState accountState;//
    }

    enum RoleCode { RC00, RC01,RC02,RC03 } //RC00融资企业, RC01物流公司,RC02仓储公司,RC03金融机构
    enum AccountState { VALID, INVALID, FROZEN } //账户状态，有效、无效、冻结
    enum ResponseType { YES, NO, NULL } //YES-同意，NO-拒绝，NULL-无

    //记录所有应收款编号数组
    bytes32[] allReceivableNos;

    //账户信息
    mapping(address => Account) accountMap;

    //存所有的应收款，应收款编号 => 应收款结构体
    mapping(bytes32 => Receivable) receivableDetailMap;

    //账号acctId -> 公钥
    mapping(bytes32 => address[]) acctIdToAddressMap;

    //付款人 -> 应收款编号
    mapping(address => address[]) pyerToReceivableMap;

    //收款人pyee -> 应收款编号
    mapping(address => address[]) pyeeToReceivableMap;

    //承兑人accptr -> 应收款编号
    mapping(address => address[]) accptrToReceivableMap;

    //签发人signer -> 应收款编号
    mapping(address => address[]) signerToReceivableMap;


    //订单编号 -> 应收款编号
    mapping(bytes32 => bytes32) orderNoToReceivableNoMap;

    //用户交易记录, 操作人acctId => 交易记录流水号
    mapping(bytes32 => bytes32[]) accountReceivableRecords;

    //所有交易记录,交易记录流水号 => ReceivableRecord
	  mapping(bytes32 => ReceivableRecord) receivableRecordMap;

   	//用户持有应收款列表, 用户acctId=>应收款编号列表
    mapping(bytes32 => bytes32[]) holdingReceivablesMap;

    //用户已兑付列表,用户账号=>已兑付应收款编号列表
    mapping(bytes32 => bytes32[]) cashedReceivablesMap;

    //应收款的操作历史，应收款编号 => 交易记录流水号
    mapping(bytes32 => bytes32[]) receivableTransferHistoryMap;

    //判断账号是否存在
    function judgeAccount(address publicKey) internal returns (bool) {
        Account account = accountMap[publicKey];
        if(account.companyName == 0x0) {
            return true;
        }
        if(account.accountState != AccountState.VALID) {
            return true;
        }
        return false;
    }

	  //判断流水号是否重复
    function judgeRepetitiveSerialNo(bytes32 serialNo) internal returns (bool){
        ReceivableRecord receivableRecord = receivableRecordMap[serialNo];
        if(receivableRecord.serialNo != 0x0){
            return true;
        }
        return false;
    }

    //签发申请时判断所传应收款编号是否已存在
    function judgeRepetitiveReceivableNo(bytes32 receivableNo) internal returns (bool) {
        for(uint i = 0; i < allReceivableNos.length; i++){
            if(receivableNo == allReceivableNos[i]){
                return true;
            }
        }
        return false;
    }

    //判断账号与公钥是否匹配
    function judgeAcctIdMatchAddress(bytes32 acctId, address newAddress) internal returns (bool){
        address oldAddress = acctIdToAddressMap[acctId];
        if(oldAddress != newAddress) {
            return true;
        }
        return false;
    }

    function judgeReplyerAddressEmpty(bytes32 acctId) internal returns (bool){
        address oldAddress = acctIdToAddressMap[acctId];
        if(oldAddress == 0x0){
            return true;
        }
        return false;
    }

     //判断回复人账户是否有效
    function judgeReplyerAccount(bytes32 acctId) internal returns (bool){
        address replyerAddress = acctIdToAddressMap[acctId];
        Account replyerAccount = accountMap[replyerAddress];
        if(replyerAccount.accountState == AccountState.INVALID){
            return true;
        }
        if(replyerAccount.companyName == 0x0){
            return true;
        }
        return false;
    }

    //记录操作详情
    function newReceivableRecord(bytes32 serialNo, bytes32 receivableNo, bytes32 applicantAcctId, bytes32 replyerAcctId, ResponseType response, uint time, bytes32 operateType, uint dealAmount) internal {
        receivableRecordMap[serialNo].serialNo = serialNo;
        receivableRecordMap[serialNo].receivableNo = receivableNo;
        receivableRecordMap[serialNo].applicantAcctId = applicantAcctId;
        receivableRecordMap[serialNo].replyerAcctId = replyerAcctId;
        receivableRecordMap[serialNo].responseType = response;
        receivableRecordMap[serialNo].time = time;
        receivableRecordMap[serialNo].operateType = operateType;
        receivableRecordMap[serialNo].dealAmount = dealAmount;
    }

    //签发申请。签发人是卖家（收款人），承兑人是买家（付款人）
    function signOutApply(bytes32 receivableNo, bytes32 orderNo, bytes32 signer, bytes32 accptr, bytes pyer,bytes pyee, uint isseAmt, uint dueDt, bytes32 rate, bytes32 serialNo, uint time) returns(uint code){
        if(receivableNo == "" || orderNo == "" || signer == "" || accptr == "" || pyer == "" || pyee == "" || rate == "" || serialNo == ""){
            return (17);
        }
        if(judgeRepetitiveserialNo(serialNo)){
            return (32);
        }
        if(isseAmt <= 0){
            return (19);
        }
        if(judgeAccount(msg.sender)){
            return (1);
        }
        if(judgeAcctIdMatchAddress(signer, msg.sender)){
            return (7);
        }
        if(judgeReplyerAddressEmpty(accptr)){
            return (4);
        }
        if(judgeReplyerAccount(accptr)){
            return (31);
        }
        if(judgeRepetitiveReceivableNo(receivableNo)){//判断该应收款编号是否已经存在
            return (30);
        }

        allReceivableNos.push(receivableNo);
        giveReceivableInfo(receivableNo, orderNo, signer, accptr, pyer, pyee, isseAmt, dueDt, rate, time);

        newReceivableRecord(serialNo, receivableNo, signer, accptr, ResponseType.NULL, time, "signOutApply", isseAmt);

        accountReceivableRecords[signer].push(serialNo);
        holdingReceivablesMap[signer].push(receivableNo);
        orderNoToReceivableNoMap[orderNo].push(receivableNo);

        receivableTransferHistoryMap[receivableNo].push(serialNo);

        return (0);
    }

    function giveReceivableInfo(bytes32 receivableNo, bytes32 orderNo, bytes32 signer, bytes32 accptr, bytes32 pyer, bytes32 pyee, uint isseAmt, uint dueDt, bytes32 rate, uint time) internal {
          Receivable receivable = receivableDetailMap[receivableNo];
          receivable.receivableNo = receivableNo;
          receivable.orderNo = orderNo;
          receivable.signer = signer;
          receivable.accptr = accptr;
          receivable.firstOwner = signer;
          receivable.pyer = pyer;
          receivable.pyee = pyee;
          receivable.isseAmt = isseAmt;
          receivable.isseDt = time;
          receivable.dueDt = dueDt;
          receivable.rate = rate;
          receivable.status = "020001";
    }

    //签发回复
    function signOutReply(bytes32 receivableNo, bytes32 replyerAcctId, ResponseType response, bytes32 serialNo, uint time) returns (bytes32){
        if(receivableNo == "" || replyerAcctId == "" || serialNo == ""){
            return (17);
        }
        if(judgeRepetitiveserialNo(serialNo)){
            return (32);
        }
        if(response != ResponseType.NO && response != ResponseType.YES){
            return (20);
        }
        if(judgeAccount(msg.sender)){
            return (2);
        }
        if(judgeAcctIdMatchAddress(replyerAcctId, msg.sender)){
            return (7);
        }

        Receivable receivable = receivableDetailMap[receivableNo];
        if(receivable.status != "020001"){
            return (6);
        }
        if(replyerAcctId != receivable.accptr){
            return (27);
        }
        receivable.lastStatus = receivable.status;
        if(response == ResponseType.NO){
            receivable.status = "000003";
        }else{
            receivable.status = "020006";
        }
        receivable.signInDt = time;

        pyerToReceivableMap[receivable.pyer].push(receivableNo);
        pyeeToReceivableMap[receivable.pyee].push(receivableNo);
        accptrToReceivableMap[receivable.accptr].push(receivableNo);
        signerToReceivableMap[receivable.signer].push(receivableNo);
        accountReceivableRecords[replyerAcctId].push(serialNo);
        newReceivableRecord(serialNo, receivableNo, receivable.signer, replyerAcctId, response, time, "signOutReply", receivable.isseAmt);
        receivableTransferHistoryMap[receivableNo].push(serialNo);
        return (0);
    }

    //贴现申请
    function discountApply(bytes32 receivableNo, bytes32 applicantAcctId, bytes32 replyerAcctId, bytes32 serialNo, uint time) returns(uint) {
         if(receivableNo == "" || applicantAcctId == "" || replyerAcctId == "" || serialNo == ""){
            return (17);
         }
         if(judgeRepetitiveserialNo(serialNo)){
            return (32);
         }
         if(judgeAccount(msg.sender)){
              return(1);
         }
         if(judgeAcctIdMatchAddress(applicantAcctId, msg.sender)){
              return (7);
         }
         if(judgeReplyerAddressEmpty(replyerAcctId)){
              return (4);
         }
         if(judgeReplyerAccount(replyerAcctId)){
             return (31);
         }

        Receivable receivable = receivableDetailMap[receivableNo];
        receivable.lastStatus = receivable.status;
        receivable.status = "070001";
        receivable.secondOwner = replyerAcctId;
        newReceivableRecord(serialNo, receivableNo, applicantAcctId, replyerAcctId, ResponseType.NULL, time, "discountApply", receivable.isseAmt);
        accountReceivableRecords[applicantAcctId].push(serialNo);
        receivableTransferHistoryMap[receivableNo].push(serialNo);
        return(0);
    }

    //贴现回复
    function discountResponse(bytes32 receivableNo, bytes32 replyerAcctId, ResponseType responseType, bytes32 serialNo, uint time) returns(uint) {
         if(receivableNo == "" || replyerAcctId == "" || serialNo == ""){
            return (17);
         }
        if(response != ResponseType.NO && response != ResponseType.YES){
            return (20);
        }
         if(judgeRepetitiveserialNo(serialNo)){
            return (32);
         }
         if(judgeAccount(msg.sender)){
              return(1);
         }
         if(judgeAcctIdMatchAddress(replyerAcctId, msg.sender)){
              return (7);
         }
        Receivable receivable = receivableDetailMap[receivableNo];
        if(responseType == ResponseType.YES) {
            receivable.lastStatus = receivable.status;
            receivable.status = "070006";//贴现已签收
            bytes32 receivableFirstOwner = receivable.firstOwner;
            receivable.firstOwner = replyerAcctId;
        }else if(responseType == ResponseType.NO){
            receivable.status = receivable.lastStatus;
        }
        holdingReceivablesMap[replyerAcctId].push(receivableNo);
        accountReceivableRecords[replyerAcctId].push(serialNo);
        newReceivableRecord(serialNo, receivableNo, receivable.firstOwner, replyerAcctId, responseType, time, "discountResponse", receivable.isseAmt);
        receivableTransferHistoryMap[receivableNo].push(serialNo);
        return (0);
    }

    //从数组中删除某个元素
    function deleteArrayElement(bytes32[] storage a, bytes32 receivableNo) internal {
        uint position;
        for(uint i = 0; i < a.length; i++) {
            if(a[i] == receivableNo) {
                position = i;
                break;
            }
            position++;
        }
        if(position != a.length) {
            a[position] = a[a.length-1];
            a.length = a.length-1;
        }
    }

    //兑付
	function cash(bytes32 receivableNo, uint time,bytes32 serialNo)returns(uint){
        if(receivableNo == "" || serialNo == ""){
            return (17);
        }
        if(judgeRepetitiveserialNo(serialNo)){
            return (32);
        }
        if(cashedAmount <= 0){
            return (16);
        }
        Receivable receivable = receivableDetailMap[receivableNo];
        if(receivable.receivableNo == 0x0) {
            return(5);
        }
        if(receivable.status != "020006" && receivable.status != "070006"){
            return(6);
        }
        //到期日才能兑付
        if(time < receivable.dueDt){
            return(10);
        }

        receivable.lastStatus = receivable.status;
        receivable.cashedAmount = cashedAmount;
        receivable.status = "000001";
        cashedReceivablesMap[receivable.accptr].push(receivableNo);
        newReceivableRecord(serialNo, receivableNo, receivable.signer, receivable.accptr, ResponseType.YES, time, "Cash", cashedAmount);
        receivable.note = getNotes(receivableNo, note);
        return(0);
	}

    //根据应收款编号查询单张应收款具体信息
    function getReceivableAllInfo(bytes32 receivableNo, bytes32 acctId) returns (uint, string, uint[], bytes pyerInfo, bytes pyeeInfo, bytes note){
         Account account = accountMap[msg.sender];
         Receivable receivable = receivableDetailMap[receivableNo];

         uint[] memory uintInfo = new uint[](5);
         if(judgeAccount(msg.sender)){
            return (1,
                 "",
                 uintInfo,
                 pyerInfo,
                 pyeeInfo,
                 note);
         }

         if(receivableNo == ""){
            return (17,
                 "",
                 uintInfo,
                 pyerInfo,
                 pyeeInfo,
                 note);
         }

         if(receivable.receivableNo == 0x0) {
             return(5,
                 "",
                 uintInfo,
                 pyerInfo,
                 pyeeInfo,
                 note);
         }


         if(receivable.signer != acctId && receivable.accptr != acctId) {
             return(28,
                 "",
                 uintInfo,
                 pyerInfo,
                 pyeeInfo,
                 note);
         }

         uintInfo[0] = receivable.isseAmt;
         uintInfo[1] = receivable.cashedAmount;
         uintInfo[2] = receivable.isseDt;
         uintInfo[3] = receivable.signInDt;
         uintInfo[4] = receivable.dueDt;

         return (0,
                 getReceivableMostInfo(receivableNo),
                 uintInfo,
                 receivable.pyerInfo,
                 receivable.pyeeInfo,
                 receivable.note);
     }

     function getReceivableMostInfo(bytes32 receivableNo) returns(string){
        bytes32[] memory value = new bytes32[](12);
        value = getReceivableValue(receivableNo);
        return SewingBytes32ArrayToString(value);
     }

     function getReceivableValue(bytes32 receivableNo) returns(bytes32[]){
        Receivable receivable = receivableDetailMap[receivableNo];
        bytes32[] memory value = new bytes32[](12);

        value[0] = receivableNo;
        value[1] = receivable.orderNum;
        value[2] = receivable.signer;
        value[3] = receivable.accptr;
        value[4] = receivable.firstOwner;
        value[5] = receivable.secondOwner;
        value[6] = receivable.status;
        value[7] = receivable.lastStatus;
        value[8] = receivable.rate;
        value[9] = receivable.interest;
        value[10] = receivable.contractNum;
        value[11] = receivable.wayBillNum;
        return value;
     }

    function SewingBytes32ArrayToString(bytes32[] value) internal returns(string){

        string  memory TheString ;
        string memory symbol1 = ",";
        uint j=0;
        for(uint i=0;i<value.length;i++){
            string memory temp1 = bytes32ToString(value[i]);
            TheString = sewingTwoString(TheString,temp1);
            if(i < value.length-1){
                TheString = sewingTwoString(TheString,symbol1);
            }
        }

        return TheString;

    }

    function bytes32ToString(bytes32 x) internal returns (string) {
        bytes memory bytesString = new bytes(32);
        uint charCount = 0;
        for (uint j = 0; j < 32; j++) {
            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));
            if (char != 0) {
                bytesString[charCount] = char;
                charCount++;
            }
        }
        bytes memory bytesStringTrimmed = new bytes(charCount);
        for (j = 0; j < charCount; j++) {
            bytesStringTrimmed[j] = bytesString[j];
        }
        return string(bytesStringTrimmed);
    }

    function sewingTwoString(string a,string b) internal returns(string){
        bytes memory a_ = bytes(a);
        bytes memory b_ = bytes(b);
        bytes memory c = new bytes(a_.length+b_.length);
        uint j = 0;
        for(uint i=0;i< c.length;i++){
           if(i<a_.length){
                c[i] = a_[i];
           }
           else{
                c[i] = b_[j];
                j++;
           }
        }
        return string(c);
    }

    //流水号查询，自己查自己
    function getRecordByserialNo(bytes32 serialNo) returns(uint, bytes32 serialNm, bytes32 receivableNo, bytes32 applicantAcctId, bytes32 replyerAcctId, ResponseType, uint, bytes32 operateType, uint){
        Account account = accountMap[msg.sender];
        ReceivableRecord receivableRecord = receivableRecordMap[serialNo];
        if(serialNo == ""){
            return (17,
                serialNm,
                receivableNo,
                applicantAcctId,
                replyerAcctId,
                ResponseType.NULL,
                0,
                operateType,
                0);
        }

        if(receivableRecord.serialNo == 0x0) {
            return(13,
                serialNm,
                receivableNo,
                applicantAcctId,
                replyerAcctId,
                ResponseType.NULL,
                0,
                operateType,
                0);
        }
        return(0,
            receivableRecord.serialNo,
            receivableRecord.receivableNo,
            receivableRecord.applicantAcctId,
            receivableRecord.replyerAcctId,
            receivableRecord.responseType,
            receivableRecord.time,
            receivableRecord.operateType,
            receivableRecord.dealAmount);

    }

}