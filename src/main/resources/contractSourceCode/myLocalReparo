contract Reparo{
    address owner;
    function Reparo(){
        owner = msg.sender;
    }

    enum RoleCode { RC00, RC01,RC02,RC03 } //RC00融资企业, RC01物流公司,RC02仓储公司,RC03金融机构
    enum AccountState { VALID, INVALID, FROZEN } //账户状态，有效、无效、冻结
    enum OrderState {UNCOMFIRMED, COMFIRMED} //UNCOMFIRMED-待卖方确认，COMFIRMED-卖方已确认
    enum ResponseType { YES, NO, NULL } //YES-同意，NO-拒绝，NULL-五

    //应收款
    struct Receivable {
        bytes32 receivableNum;//应收款id，由编号，子编号拼接而成
        bytes32 payer; //付款人（签收人）
        bytes32 payee; //收款人（签发人）
        bytes32 Owner;//本手持有人
        bytes32 nextOwner;//下手持有人
        uint    isseAmt; //票面金额
        uint    cashedAmount;//已兑付金额
        bytes32 status;//应收款状态
        bytes32 lastStatus;//上一状态
        uint    isseDat; //签发日
        uint    signInDat;//签收日，根据时间筛选的参照对象
        uint    expiryDate;//签收有效期
        uint    dueDt; //到期日
        bytes   note;//备注
    }

    //帐户信息
    struct Account{
        bytes32     publicKey;//公钥
        bytes32     nickName;//用户名
        bytes32     companyName;//企业名称
        RoleCode    code;//角色
        AccountState accountState;//
    }

    //订单
    struct Order{
        bytes32     orderId;//订单编号
        bytes32     payerId;//买方id
        bytes32     payeeId;//卖方（供应商id）
        bytes32     productName;//货品名称. -->test productName，unitPrice，productNum待确认是否需要使用数组，若需要的话addOrder中的参数如何传
        uint        unitPrice;//货品单价
        uint        productNum;//货品数量
        uint        totalPrice;//订单总价
        uint        timeStamp;//订单生成状态
        OrderState  orderState  ;//订单状态
    }

    //操作记录，字段待确认
    struct ReceivableRecord {
        bytes32 receivableId;//应收款编号
        bytes32 serialNum;//流水号
        bytes32 applicantId;//申请人账号
        bytes32 replyerId;//回复人账号
        ResponseType responseType;//回复意见
        uint time;//时间戳
        bytes32 operateType; //操作类型 enum申请、确认
        uint dealAmount;//操作金额
    }

    // 用户公钥 => 结构体Account
    mapping( address => Account) accountMap;

    // 订单id => 处理订单详情
    mapping( bytes32 => Order ) orderDetailMap;

    // 账号 => 所有订单列表
    mapping(bytes32 => bytes32[]) allOrderMap;

    // 用户公钥 => 待处理订单编号列表
    mapping( bytes32 => bytes32[]) pendingOrederMap;

    // 应收款编号 => 应收款详情
    mapping( bytes32 => Receivable) receivableDetailMap;

    // 用户公钥 => 所有应收款列表
    mapping( bytes32 => bytes32[]) allReceivablMap;

    //  用户公钥 => 待处理应收款列表
    mapping( bytes32 => bytes32[]) pendingReceivables;

    //新增待确认订单
    ////111,555,666,"productname",100,100,10000,20170101
    function addOrder (bytes32 orderId,
                       bytes32 payerId,
                       bytes32 payeeId,
                       bytes32 productName,
                       uint unitPrice,
                       uint productNum,
                       uint totalPrice,
                       uint timeStamp) returns(uint, bool){
       orderDetailMap[orderId].orderId = orderId;
       orderDetailMap[orderId].payerId = payerId;
       orderDetailMap[orderId].payeeId = payeeId;
       orderDetailMap[orderId].productName = productName;
       orderDetailMap[orderId].unitPrice = unitPrice;
       orderDetailMap[orderId].productNum = productNum;
       orderDetailMap[orderId].totalPrice = totalPrice;
       orderDetailMap[orderId].timeStamp = timeStamp;
       orderDetailMap[orderId].orderState = OrderState.UNCOMFIRMED;

       allOrderMap[payerId].push(orderId);//买方的所有订单
       allOrderMap[payeeId].push(orderId);//卖方的所有订单


       pendingOrederMap[payerId].push(orderId);//买方的待处理订单
       pendingOrederMap[payeeId].push(orderId);//卖方的待处理订单

       return (0,true);
    }

    function orderExists(bytes32 orderId) returns(uint,bool){
       Order order = orderDetailMap[orderId];
       if(order.orderId == 0 ) return(1,false);
       return(0,true);
    }

     //根据订单id获取订单详情。--test 待补充判断订单是否存在
    function queryOrderDetail(bytes32 orderId)  returns (uint,bytes32,bytes32,bytes32,bytes32,uint,uint,uint,uint,OrderState){
       Order order = orderDetailMap[orderId];

       return (0,
              order.orderId,
              order.payerId,
              order.payeeId,
              order.productName,
              order.unitPrice,
              order.productNum,
              order.totalPrice,
              order.timeStamp,
              order.orderState);
       //return (0,true);
    }

    struct User{
            uint id;
            bytes32 nickName;
            bytes32 password;
            bytes32 phoneNum;
        }

        mapping (uint=>User) user;

        uint[] users;
        string[] ss;

        function addUser(uint _id,
        bytes32 _nickName,
        bytes32 _password,
        bytes32 _phoneNum) returns(uint, bool){
            user[_id].id = _id;
            user[_id].nickName = _nickName;
            user[_id].password = _password;
            user[_id].phoneNum = _phoneNum;

            users.push(_id);

            return (0, true);
        }

        function queryUser(uint _id)returns(uint, bytes32, bytes32, bytes32) {
            return(0, user[_id].nickName, user[_id].password, user[_id].phoneNum);
        }

        function queryUserList() returns(uint, uint[]) {
            return (0, users);
        }

        function queryUserDetailList() returns(uint, uint[], bytes32[], bytes32[], bytes32[]) {
            uint[] memory IdArr = new uint[](users.length);
            bytes32[] memory nickNameArr = new bytes32[](users.length);
            bytes32[] memory passwordArr = new bytes32[](users.length);
            bytes32[] memory phoneNumArr = new bytes32[](users.length);
            for(uint i = 0; i < users.length; i++) {
                uint tempId = users[i];
                IdArr[i] = tempId;
                nickNameArr[i] = user[tempId].nickName;
                passwordArr[i] = user[tempId].password;
                phoneNumArr[i] = user[tempId].phoneNum;
            }

          return (0, IdArr, nickNameArr, passwordArr, phoneNumArr);
        }
}